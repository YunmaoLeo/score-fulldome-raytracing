#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_scalar_block_layout : enable

layout(binding = 1, rgba8) uniform image2D image;

layout(binding = 2) uniform CameraProperties {
    mat4 projInverse;
    mat4 viewInverse;
} cam;

layout(set = 0, binding = 3, std430) readonly buffer PointBuffer {
    vec4 positions[]; // xyz + 1
};

layout(set = 0, binding = 4, std430) readonly buffer ColorBuffer {
    vec4 colors[]; // rgb + 1
};

void main()
{
    ivec2 pixelCoord = ivec2(gl_LaunchIDEXT.xy);
    vec2 uv = (vec2(pixelCoord) + 0.5) / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = uv * 2.0 - 1.0;

    vec4 origin = cam.viewInverse * vec4(0.0, 0.0, 0.0, 1.0);
    vec4 target = cam.projInverse * vec4(d.x, d.y, 1.0, 1.0);
    vec4 direction = cam.viewInverse * vec4(normalize(target.xyz), 0.0);

    vec3 rayOrigin = origin.xyz;
    vec3 rayDir = normalize(direction.xyz);

    float minDist = 0.01;
    vec3 finalColor = vec3(0.0);

    for (uint i = 0; i < positions.length(); ++i) {
        vec3 pos = positions[i].xyz;
        vec3 toPoint = pos - rayOrigin;
        float projLen = dot(toPoint, rayDir);
        if (projLen < 0.0) continue;

        vec3 projected = rayOrigin + projLen * rayDir;
        float dist = length(pos - projected);

        if (dist < minDist) {
            minDist = dist;
            finalColor = colors[i].rgb;
        }
    }

    imageStore(image, pixelCoord, vec4(finalColor, 1.0));
}
